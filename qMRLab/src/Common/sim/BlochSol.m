function M = BlochSol(t, M, Param, Pulse)
%BLOCHSOL Analytical solution to the Bloch-McConnell ordinary differential 
%equations.for free or constant RF. (Faster than solving the ODE
%numerically)
%   M = BlochSol(t, M, Param, Pulse)
%
%   --args--
%   t: Function handle variable, represents the time.
%   M : magnetization vector [Mxf, Myf, Mzf, Mzr]
%   Param: Tissue parameter structure.
%
%          -fields-
%          M0f: Free pool equilibrium magnetization.
%          M0r: Restricted pool equilibrium magnetization. (M0r = F*M0f)
%          R1f: Free pool longitudinal relaxation rate.
%          R1r: Restricted pool longitudinal relaxation rate.
%          R2f: Free pool transverse relaxation rate.
%          kf: Free pool magnetization exchange rate. 
%          kr: Restricted pool magnetization exchange rate. (= kf/F)
%          G: Lineshape value of the restricted pool (generated by
%             computeG.m)
%
%   Pulse: RF Pulse structure (generated by GetPulse.m).
%
%   References: John G. Sled and G. Bruce Pike. Quantitative Interpretation
%               of Magnetization Transfer in Spoiled Gradient Echo MRI 
%               Sequences, J. of Magn. Res., 145, 24?36, Eqs. 1-5, A1
%               (2000)
%
%               Sharon Portnoy and Greg J. Stanisz. Modeling Pulsed 
%               Magnetization Transfer, Mag. Res in Med, 58:144-155, Eq. 6
%               (2007)
%
%   See also COMPUTEG, GETPULSE, BLOCH, BLOCHNOMT.
%

gamma = 2*pi*42576;
R1f = Param.R1f;
if isfield(Param,'T2f')
    R2f = 1./Param.T2f;
else
    R2f = Param.R2f;
end
R1r = Param.R1r;
if isfield(Param,'F')
    kf  = Param.kr.*Param.F;
    M0r = Param.M0f.*Param.F;
else
    kf = Param.kf;
    M0r = Param.M0r;
end

kr  = Param.kr;
M0f = Param.M0f;
M0  = [0; 0; M0f; M0r];

if (nargin < 4)
        omega = 0;
        delta = 0;
else
        omega = gamma*Pulse.amp;
        delta = Pulse.delta;
end

W = pi*Param.G*omega^2;

A = [      -R2f, -2*pi*delta,         0,      0; ...
     2*pi*delta,        -R2f,     omega,      0; ...
              0,      -omega, -(R1f+kf),     kr; ...
              0,           0,        kf, -(R1r+kr+W)];

B = [ 0,    0,   0,   0; ...
      0,    0,   0,   0; ...
      0,    0, R1f,   0; ...
      0,    0,   0, R1r];
          
EA = expm(A*t);
I = eye(4);
M = EA*M + A\(EA - I)*B*M0;

end

